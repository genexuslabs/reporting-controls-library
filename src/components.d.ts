/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { GeneratorType, QueryViewerChartType, QueryViewerOutputType, QueryViewerShowDataAs, QueryViewerTrendPeriod, TrendIcon } from "./common/basic-types";
import { QueryViewerServiceResponse } from "./services/types/service-result";
import { ChartOptions, LegendOptions, PlotOptions, SeriesOptionsType, TitleOptions, TooltipOptions, XAxisOptions, YAxisOptions } from "highcharts";
import { QueryViewerParameterChangedEvent } from "./components/query-viewer-parameter/query-viewer-parameter";
export namespace Components {
    interface GxQueryViewer {
        /**
          * Allowing elements order to change
         */
        "allowElementsOrderChange": boolean;
        /**
          * Allow selection
         */
        "allowSelection": boolean;
        /**
          * Auto refresh group
         */
        "autoRefreshGroup": string;
        /**
          * If type== PivotTable or Table, if true will shrink the table
         */
        "autoResize": boolean;
        /**
          * If autoResize, in here select the type, Width, height, or both
         */
        "autoResizeType": "Both" | "Vertical" | "Horizontal";
        /**
          * If type == Chart, this is the chart type: Bar, Pie, Timeline, etc...
         */
        "chartType": QueryViewerChartType;
        /**
          * Version of data
         */
        "dataVersionId": number;
        /**
          * Allowing or not Comlumn sort
         */
        "disableColumnSort": boolean;
        /**
          * If type== PivotTable or Table allow to export to HTML
         */
        "exportToHTML": boolean;
        /**
          * If type== PivotTable or Table allow to export to PDF
         */
        "exportToPDF": boolean;
        /**
          * If type== PivotTable or Table allow to export to XLS
         */
        "exportToXLS": boolean;
        /**
          * If type== PivotTable or Table allow to export to XLSX
         */
        "exportToXLSX": boolean;
        /**
          * If type== PivotTable or Table allow to export to XML
         */
        "exportToXML": boolean;
        /**
          * Include max and min
         */
        "includeMaxMin": boolean;
        /**
          * Include spark line
         */
        "includeSparkline": boolean;
        /**
          * If true includes trend on the graph
         */
        "includeTrend": boolean;
        /**
          * True if it is external query
         */
        "isExternalQuery": boolean;
        /**
          * Language of the QueryViewer
         */
        "language": string;
        /**
          * Object of QueryViewer
         */
        "object": string;
        /**
          * Object type -> Query or DataProvider
         */
        "objectType": string;
        /**
          * Orientation of the graph
         */
        "orientation": "Horizontal" | "Vertical";
        /**
          * If paging true, number of items for a single page
         */
        "pageSize": number;
        /**
          * If type == PivotTable or Table, if true there is paging, else everything in one table
         */
        "paging": boolean;
        /**
          * Timeline
         */
        "plotSeries": "InTheSameChart" | "InSeparateCharts";
        /**
          * Title of the QueryViewer
         */
        "queryTitle": string;
        /**
          * For timeline for remembering layout
         */
        "rememberLayout": boolean;
        /**
          * Type of data to show
         */
        "showDataAs": QueryViewerShowDataAs;
        /**
          * Ax to show data labels
         */
        "showDataLabelsIn": string;
        /**
          * if true show values on the graph
         */
        "showValues": boolean;
        /**
          * Theme for showing the graph
         */
        "theme": string;
        /**
          * If includeTrend, defines the period of the trend
         */
        "trendPeriod": QueryViewerTrendPeriod;
        /**
          * Type of the QueryViewer: Table, PivotTable, Chart, Card
         */
        "type": QueryViewerOutputType;
        /**
          * if true the x Axes intersect at zero
         */
        "xAxisIntersectionAtZero": boolean;
        /**
          * Labels for XAxis
         */
        "xAxisLabels": | "Horizontally"
    | "Rotated30"
    | "Rotated45"
    | "Rotated60"
    | "Vertically";
        /**
          * X Axis title
         */
        "xAxisTitle": string;
        /**
          * Y Axis title
         */
        "yAxisTitle": string;
    }
    interface GxQueryViewerCard {
        /**
          * Description, describe the content or purpose of the element set as Datum in the query object.
         */
        "description": string;
        /**
          * Specifies whether to include the maximum and minimum values in the series.
         */
        "includeMaxMin": boolean;
        /**
          * IncludeSparkline, specifies whether to include a sparkline chart for the values or not.
         */
        "includeSparkline": boolean;
        /**
          * IncludeTrend, specifies whether to include a trend mark for the values or not.
         */
        "includeTrend": boolean;
        /**
          * maxValue, specifies the maximum value in the series.
         */
        "maxValue": string;
        /**
          * minValue, specifies the minimum value in the series.
         */
        "minValue": string;
        /**
          * Specifies the data used for the series of the sparkline.
         */
        "seriesData": number[][];
        /**
          * Specifies the trend used for the trend icon.
         */
        "trendIcon": TrendIcon;
        /**
          * Value, specifies the value to show in the card.
         */
        "value": string;
    }
    interface GxQueryViewerCardController {
        /**
          * Specifies whether to include the maximum and minimum values in the series.
         */
        "includeMaxMin": boolean;
        /**
          * IncludeSparkline, specifies whether to include a sparkline chart for the values or not.
         */
        "includeSparkline": boolean;
        /**
          * IncludeTrend, specifies whether to include a trend mark for the values or not.
         */
        "includeTrend": boolean;
        /**
          * Orientation, specifies whether to arrange the attributes horizontally or vertically when than one data attribute is present.
         */
        "orientation": "Horizontal" | "Vertical";
        "serviceResponse": QueryViewerServiceResponse;
        /**
          * ShowDataAs, specifies whether to show the actual values, the values as a percentage of the target values, or both.
         */
        "showDataAs": QueryViewerShowDataAs;
        /**
          * If includeTrend == True, TrendPeriod specifies the period of time to calculate the trend.
         */
        "trendPeriod": QueryViewerTrendPeriod;
    }
    interface GxQueryViewerChart {
        /**
          * Title that will be displayed on top of the query
         */
        "chartOptions": ChartOptions;
        /**
          * Name of the element
         */
        "chartTitle": TitleOptions;
        /**
          * Options of the tooltip, the tooltip appears when hovering over a point in a series.
         */
        "legendOptions": LegendOptions;
        /**
          * Options of the legend, the legend displays the series in a chart with a predefined symbol and the name of the series.
         */
        "plotOptions": PlotOptions;
        /**
          * Options of the X axis (usually this is the horizontal axis).
         */
        "seriesOptions": SeriesOptionsType[];
        /**
          * Options of the chart.
         */
        "tooltipOptions": TooltipOptions;
        /**
          * Options of the Y axis (usually this is the vertical axis).
         */
        "xaxisOptions": XAxisOptions;
        /**
          * Options of the plot for each series type chart.
         */
        "yaxisOptions": YAxisOptions;
    }
    interface GxQueryViewerController {
        /**
          * @todo Add description
         */
        "allowElementsOrderChange": boolean;
        /**
          * Determines the application namespace where the program is generated and compiled.
         */
        "applicationNamespace": string;
        /**
          * Base URL of the server
         */
        "baseUrl": string;
        /**
          * When `type == Chart`, specifies the chart type: Bar, Pie, Timeline, etc...
         */
        "chartType": QueryViewerChartType;
        /**
          * Environment of the project: java or net
         */
        "environment": GeneratorType;
        /**
          * Include spark line
         */
        "includeSparkline": boolean;
        /**
          * If true includes trend on the graph
         */
        "includeTrend": boolean;
        /**
          * Name of the Query or Data provider assigned
         */
        "objectName": string;
        /**
          * For timeline for remembering layout
         */
        "rememberLayout": boolean;
        /**
          * @todo Add description
         */
        "returnSampleData": boolean;
        /**
          * @todo Add description and improve type
         */
        "translationType": string;
        /**
          * Type of the QueryViewer: Table, PivotTable, Chart, Card
         */
        "type": QueryViewerOutputType;
    }
    interface GxQueryViewerElement {
        /**
          * Aggregation fucntion
         */
        "aggregation": "Sum" | "Average" | "Count" | "Max" | "Min";
        /**
          * Which axis, row or column
         */
        "axis": "Rows" | "Columns" | "Pages";
        /**
          * Axis Order type
         */
        "axisOrderType": | "None"
    | "Ascending"
    | "Descending"
    | "Custom";
        /**
          * Axis order values comma separated
         */
        "axisOrderValues": string;
        /**
          * Data field
         */
        "dataField": string;
        /**
          * Title to show
         */
        "elementTitle": string;
        /**
          * Expand collapse type
         */
        "expandCollapseType": | "ExpandAllValues"
    | "CollapseAllValues"
    | "ExpandSomeValues";
        /**
          * Expand collapse values comma separated
         */
        "expandCollapseValues": string;
        /**
          * Type of the filter
         */
        "filterType": | "ShowAllValues"
    | "HideAllValues"
    | "ShowSomeValues";
        /**
          * Filter values comma separated
         */
        "filterValues": string;
        /**
          * Grouping by day of week title
         */
        "groupingDayOfWeekTitle": string;
        /**
          * Grouping by day of week
         */
        "groupingGroupByDayOfWeek": boolean;
        /**
          * Grouping by month
         */
        "groupingGroupByMonth": boolean;
        /**
          * Grouping by Quarter
         */
        "groupingGroupByQuarter": boolean;
        /**
          * Grouping by semester
         */
        "groupingGroupBySemester": boolean;
        /**
          * Grouping by year
         */
        "groupingGroupByYear": boolean;
        /**
          * Grouping hide vale
         */
        "groupingHideValue": boolean;
        /**
          * Grouping by month title
         */
        "groupingMonthTitle": string;
        /**
          * Grouping by Quarter title
         */
        "groupingQuarterTitle": string;
        /**
          * Grouping by Semster title
         */
        "groupingSemesterTitle": string;
        /**
          * Gouping by Year title
         */
        "groupingYearTitle": string;
        /**
          * Name of the element
         */
        "name": string;
        /**
          * Raise item click
         */
        "raiseItemClick": boolean;
        /**
          * Type of the element
         */
        "type": "Axis" | "Datum";
        /**
          * How to show it
         */
        "visible": "Always" | "Yes" | "No" | "Never";
    }
    interface GxQueryViewerElementFormat {
        /**
          * If true cand drag to pages
         */
        "canDragToPages": boolean;
        /**
          * Format style
         */
        "formatStyle": string;
        /**
          * Max value
         */
        "maximumValue": string;
        /**
          * Format on values
         */
        "picture": string;
        /**
          * How to show subtotals
         */
        "subtotals": "Yes" | "Hidden" | "No";
        /**
          * Target value
         */
        "targetValue": string;
    }
    interface GxQueryViewerFormatStyle {
        /**
          * If Conditional true for applying to row or column
         */
        "applyToRowOrColumn": boolean;
        /**
          * If Format the operator of the element
         */
        "operator": "EQ" | "LT" | "GT" | "LE" | "GE" | "NE" | "IN";
        /**
          * Style or Css class
         */
        "styleOrClass": string;
        /**
          * Type of the element Conditional or Format
         */
        "type": "Values" | "Conditional";
        /**
          * If Conditional Value to format
         */
        "value": string;
        /**
          * If format first value
         */
        "value1": string;
        /**
          * If format second value
         */
        "value2": string;
    }
    interface GxQueryViewerParameter {
        /**
          * Name of the parameter
         */
        "Name": string;
        /**
          * Value of the parameter
         */
        "Value": string;
    }
}
export interface GxQueryViewerCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGxQueryViewerCardElement;
}
export interface GxQueryViewerControllerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGxQueryViewerControllerElement;
}
export interface GxQueryViewerElementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGxQueryViewerElementElement;
}
export interface GxQueryViewerElementFormatCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGxQueryViewerElementFormatElement;
}
export interface GxQueryViewerFormatStyleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGxQueryViewerFormatStyleElement;
}
export interface GxQueryViewerParameterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGxQueryViewerParameterElement;
}
declare global {
    interface HTMLGxQueryViewerElement extends Components.GxQueryViewer, HTMLStencilElement {
    }
    var HTMLGxQueryViewerElement: {
        prototype: HTMLGxQueryViewerElement;
        new (): HTMLGxQueryViewerElement;
    };
    interface HTMLGxQueryViewerCardElement extends Components.GxQueryViewerCard, HTMLStencilElement {
    }
    var HTMLGxQueryViewerCardElement: {
        prototype: HTMLGxQueryViewerCardElement;
        new (): HTMLGxQueryViewerCardElement;
    };
    interface HTMLGxQueryViewerCardControllerElement extends Components.GxQueryViewerCardController, HTMLStencilElement {
    }
    var HTMLGxQueryViewerCardControllerElement: {
        prototype: HTMLGxQueryViewerCardControllerElement;
        new (): HTMLGxQueryViewerCardControllerElement;
    };
    interface HTMLGxQueryViewerChartElement extends Components.GxQueryViewerChart, HTMLStencilElement {
    }
    var HTMLGxQueryViewerChartElement: {
        prototype: HTMLGxQueryViewerChartElement;
        new (): HTMLGxQueryViewerChartElement;
    };
    interface HTMLGxQueryViewerControllerElement extends Components.GxQueryViewerController, HTMLStencilElement {
    }
    var HTMLGxQueryViewerControllerElement: {
        prototype: HTMLGxQueryViewerControllerElement;
        new (): HTMLGxQueryViewerControllerElement;
    };
    interface HTMLGxQueryViewerElementElement extends Components.GxQueryViewerElement, HTMLStencilElement {
    }
    var HTMLGxQueryViewerElementElement: {
        prototype: HTMLGxQueryViewerElementElement;
        new (): HTMLGxQueryViewerElementElement;
    };
    interface HTMLGxQueryViewerElementFormatElement extends Components.GxQueryViewerElementFormat, HTMLStencilElement {
    }
    var HTMLGxQueryViewerElementFormatElement: {
        prototype: HTMLGxQueryViewerElementFormatElement;
        new (): HTMLGxQueryViewerElementFormatElement;
    };
    interface HTMLGxQueryViewerFormatStyleElement extends Components.GxQueryViewerFormatStyle, HTMLStencilElement {
    }
    var HTMLGxQueryViewerFormatStyleElement: {
        prototype: HTMLGxQueryViewerFormatStyleElement;
        new (): HTMLGxQueryViewerFormatStyleElement;
    };
    interface HTMLGxQueryViewerParameterElement extends Components.GxQueryViewerParameter, HTMLStencilElement {
    }
    var HTMLGxQueryViewerParameterElement: {
        prototype: HTMLGxQueryViewerParameterElement;
        new (): HTMLGxQueryViewerParameterElement;
    };
    interface HTMLElementTagNameMap {
        "gx-query-viewer": HTMLGxQueryViewerElement;
        "gx-query-viewer-card": HTMLGxQueryViewerCardElement;
        "gx-query-viewer-card-controller": HTMLGxQueryViewerCardControllerElement;
        "gx-query-viewer-chart": HTMLGxQueryViewerChartElement;
        "gx-query-viewer-controller": HTMLGxQueryViewerControllerElement;
        "gx-query-viewer-element": HTMLGxQueryViewerElementElement;
        "gx-query-viewer-element-format": HTMLGxQueryViewerElementFormatElement;
        "gx-query-viewer-format-style": HTMLGxQueryViewerFormatStyleElement;
        "gx-query-viewer-parameter": HTMLGxQueryViewerParameterElement;
    }
}
declare namespace LocalJSX {
    interface GxQueryViewer {
        /**
          * Allowing elements order to change
         */
        "allowElementsOrderChange"?: boolean;
        /**
          * Allow selection
         */
        "allowSelection"?: boolean;
        /**
          * Auto refresh group
         */
        "autoRefreshGroup"?: string;
        /**
          * If type== PivotTable or Table, if true will shrink the table
         */
        "autoResize"?: boolean;
        /**
          * If autoResize, in here select the type, Width, height, or both
         */
        "autoResizeType"?: "Both" | "Vertical" | "Horizontal";
        /**
          * If type == Chart, this is the chart type: Bar, Pie, Timeline, etc...
         */
        "chartType"?: QueryViewerChartType;
        /**
          * Version of data
         */
        "dataVersionId"?: number;
        /**
          * Allowing or not Comlumn sort
         */
        "disableColumnSort"?: boolean;
        /**
          * If type== PivotTable or Table allow to export to HTML
         */
        "exportToHTML"?: boolean;
        /**
          * If type== PivotTable or Table allow to export to PDF
         */
        "exportToPDF"?: boolean;
        /**
          * If type== PivotTable or Table allow to export to XLS
         */
        "exportToXLS"?: boolean;
        /**
          * If type== PivotTable or Table allow to export to XLSX
         */
        "exportToXLSX"?: boolean;
        /**
          * If type== PivotTable or Table allow to export to XML
         */
        "exportToXML"?: boolean;
        /**
          * Include max and min
         */
        "includeMaxMin"?: boolean;
        /**
          * Include spark line
         */
        "includeSparkline"?: boolean;
        /**
          * If true includes trend on the graph
         */
        "includeTrend"?: boolean;
        /**
          * True if it is external query
         */
        "isExternalQuery"?: boolean;
        /**
          * Language of the QueryViewer
         */
        "language"?: string;
        /**
          * Object of QueryViewer
         */
        "object"?: string;
        /**
          * Object type -> Query or DataProvider
         */
        "objectType"?: string;
        /**
          * Orientation of the graph
         */
        "orientation"?: "Horizontal" | "Vertical";
        /**
          * If paging true, number of items for a single page
         */
        "pageSize"?: number;
        /**
          * If type == PivotTable or Table, if true there is paging, else everything in one table
         */
        "paging"?: boolean;
        /**
          * Timeline
         */
        "plotSeries"?: "InTheSameChart" | "InSeparateCharts";
        /**
          * Title of the QueryViewer
         */
        "queryTitle"?: string;
        /**
          * For timeline for remembering layout
         */
        "rememberLayout"?: boolean;
        /**
          * Type of data to show
         */
        "showDataAs"?: QueryViewerShowDataAs;
        /**
          * Ax to show data labels
         */
        "showDataLabelsIn"?: string;
        /**
          * if true show values on the graph
         */
        "showValues"?: boolean;
        /**
          * Theme for showing the graph
         */
        "theme"?: string;
        /**
          * If includeTrend, defines the period of the trend
         */
        "trendPeriod"?: QueryViewerTrendPeriod;
        /**
          * Type of the QueryViewer: Table, PivotTable, Chart, Card
         */
        "type"?: QueryViewerOutputType;
        /**
          * if true the x Axes intersect at zero
         */
        "xAxisIntersectionAtZero"?: boolean;
        /**
          * Labels for XAxis
         */
        "xAxisLabels"?: | "Horizontally"
    | "Rotated30"
    | "Rotated45"
    | "Rotated60"
    | "Vertically";
        /**
          * X Axis title
         */
        "xAxisTitle"?: string;
        /**
          * Y Axis title
         */
        "yAxisTitle"?: string;
    }
    interface GxQueryViewerCard {
        /**
          * Description, describe the content or purpose of the element set as Datum in the query object.
         */
        "description"?: string;
        /**
          * Specifies whether to include the maximum and minimum values in the series.
         */
        "includeMaxMin"?: boolean;
        /**
          * IncludeSparkline, specifies whether to include a sparkline chart for the values or not.
         */
        "includeSparkline"?: boolean;
        /**
          * IncludeTrend, specifies whether to include a trend mark for the values or not.
         */
        "includeTrend"?: boolean;
        /**
          * maxValue, specifies the maximum value in the series.
         */
        "maxValue"?: string;
        /**
          * minValue, specifies the minimum value in the series.
         */
        "minValue"?: string;
        /**
          * ItemClickEvent, executes actions when this event is triggered after clicking on a query element.
         */
        "onItemClickEvent"?: (event: GxQueryViewerCardCustomEvent<any>) => void;
        /**
          * Specifies the data used for the series of the sparkline.
         */
        "seriesData"?: number[][];
        /**
          * Specifies the trend used for the trend icon.
         */
        "trendIcon"?: TrendIcon;
        /**
          * Value, specifies the value to show in the card.
         */
        "value"?: string;
    }
    interface GxQueryViewerCardController {
        /**
          * Specifies whether to include the maximum and minimum values in the series.
         */
        "includeMaxMin"?: boolean;
        /**
          * IncludeSparkline, specifies whether to include a sparkline chart for the values or not.
         */
        "includeSparkline"?: boolean;
        /**
          * IncludeTrend, specifies whether to include a trend mark for the values or not.
         */
        "includeTrend"?: boolean;
        /**
          * Orientation, specifies whether to arrange the attributes horizontally or vertically when than one data attribute is present.
         */
        "orientation"?: "Horizontal" | "Vertical";
        "serviceResponse"?: QueryViewerServiceResponse;
        /**
          * ShowDataAs, specifies whether to show the actual values, the values as a percentage of the target values, or both.
         */
        "showDataAs"?: QueryViewerShowDataAs;
        /**
          * If includeTrend == True, TrendPeriod specifies the period of time to calculate the trend.
         */
        "trendPeriod"?: QueryViewerTrendPeriod;
    }
    interface GxQueryViewerChart {
        /**
          * Title that will be displayed on top of the query
         */
        "chartOptions"?: ChartOptions;
        /**
          * Name of the element
         */
        "chartTitle"?: TitleOptions;
        /**
          * Options of the tooltip, the tooltip appears when hovering over a point in a series.
         */
        "legendOptions"?: LegendOptions;
        /**
          * Options of the legend, the legend displays the series in a chart with a predefined symbol and the name of the series.
         */
        "plotOptions"?: PlotOptions;
        /**
          * Options of the X axis (usually this is the horizontal axis).
         */
        "seriesOptions"?: SeriesOptionsType[];
        /**
          * Options of the chart.
         */
        "tooltipOptions"?: TooltipOptions;
        /**
          * Options of the Y axis (usually this is the vertical axis).
         */
        "xaxisOptions"?: XAxisOptions;
        /**
          * Options of the plot for each series type chart.
         */
        "yaxisOptions"?: YAxisOptions;
    }
    interface GxQueryViewerController {
        /**
          * @todo Add description
         */
        "allowElementsOrderChange"?: boolean;
        /**
          * Determines the application namespace where the program is generated and compiled.
         */
        "applicationNamespace"?: string;
        /**
          * Base URL of the server
         */
        "baseUrl"?: string;
        /**
          * When `type == Chart`, specifies the chart type: Bar, Pie, Timeline, etc...
         */
        "chartType"?: QueryViewerChartType;
        /**
          * Environment of the project: java or net
         */
        "environment"?: GeneratorType;
        /**
          * Include spark line
         */
        "includeSparkline"?: boolean;
        /**
          * If true includes trend on the graph
         */
        "includeTrend"?: boolean;
        /**
          * Name of the Query or Data provider assigned
         */
        "objectName"?: string;
        /**
          * Fired when new metadata and data is fetched
         */
        "onQueryViewerServiceResponse"?: (event: GxQueryViewerControllerCustomEvent<QueryViewerServiceResponse>) => void;
        /**
          * For timeline for remembering layout
         */
        "rememberLayout"?: boolean;
        /**
          * @todo Add description
         */
        "returnSampleData"?: boolean;
        /**
          * @todo Add description and improve type
         */
        "translationType"?: string;
        /**
          * Type of the QueryViewer: Table, PivotTable, Chart, Card
         */
        "type"?: QueryViewerOutputType;
    }
    interface GxQueryViewerElement {
        /**
          * Aggregation fucntion
         */
        "aggregation"?: "Sum" | "Average" | "Count" | "Max" | "Min";
        /**
          * Which axis, row or column
         */
        "axis"?: "Rows" | "Columns" | "Pages";
        /**
          * Axis Order type
         */
        "axisOrderType"?: | "None"
    | "Ascending"
    | "Descending"
    | "Custom";
        /**
          * Axis order values comma separated
         */
        "axisOrderValues"?: string;
        /**
          * Data field
         */
        "dataField"?: string;
        /**
          * Title to show
         */
        "elementTitle"?: string;
        /**
          * Expand collapse type
         */
        "expandCollapseType"?: | "ExpandAllValues"
    | "CollapseAllValues"
    | "ExpandSomeValues";
        /**
          * Expand collapse values comma separated
         */
        "expandCollapseValues"?: string;
        /**
          * Type of the filter
         */
        "filterType"?: | "ShowAllValues"
    | "HideAllValues"
    | "ShowSomeValues";
        /**
          * Filter values comma separated
         */
        "filterValues"?: string;
        /**
          * Grouping by day of week title
         */
        "groupingDayOfWeekTitle"?: string;
        /**
          * Grouping by day of week
         */
        "groupingGroupByDayOfWeek"?: boolean;
        /**
          * Grouping by month
         */
        "groupingGroupByMonth"?: boolean;
        /**
          * Grouping by Quarter
         */
        "groupingGroupByQuarter"?: boolean;
        /**
          * Grouping by semester
         */
        "groupingGroupBySemester"?: boolean;
        /**
          * Grouping by year
         */
        "groupingGroupByYear"?: boolean;
        /**
          * Grouping hide vale
         */
        "groupingHideValue"?: boolean;
        /**
          * Grouping by month title
         */
        "groupingMonthTitle"?: string;
        /**
          * Grouping by Quarter title
         */
        "groupingQuarterTitle"?: string;
        /**
          * Grouping by Semster title
         */
        "groupingSemesterTitle"?: string;
        /**
          * Gouping by Year title
         */
        "groupingYearTitle"?: string;
        /**
          * Name of the element
         */
        "name"?: string;
        /**
          * Fired each time the properties of the control changes
         */
        "onElementChanged"?: (event: GxQueryViewerElementCustomEvent<any>) => void;
        /**
          * Raise item click
         */
        "raiseItemClick"?: boolean;
        /**
          * Type of the element
         */
        "type"?: "Axis" | "Datum";
        /**
          * How to show it
         */
        "visible"?: "Always" | "Yes" | "No" | "Never";
    }
    interface GxQueryViewerElementFormat {
        /**
          * If true cand drag to pages
         */
        "canDragToPages"?: boolean;
        /**
          * Format style
         */
        "formatStyle"?: string;
        /**
          * Max value
         */
        "maximumValue"?: string;
        /**
          * Fired each time the properties of the control changes
         */
        "onElementChanged"?: (event: GxQueryViewerElementFormatCustomEvent<any>) => void;
        /**
          * Format on values
         */
        "picture"?: string;
        /**
          * How to show subtotals
         */
        "subtotals"?: "Yes" | "Hidden" | "No";
        /**
          * Target value
         */
        "targetValue"?: string;
    }
    interface GxQueryViewerFormatStyle {
        /**
          * If Conditional true for applying to row or column
         */
        "applyToRowOrColumn"?: boolean;
        /**
          * Fired each time the properties of the control changes
         */
        "onElementChanged"?: (event: GxQueryViewerFormatStyleCustomEvent<any>) => void;
        /**
          * If Format the operator of the element
         */
        "operator"?: "EQ" | "LT" | "GT" | "LE" | "GE" | "NE" | "IN";
        /**
          * Style or Css class
         */
        "styleOrClass"?: string;
        /**
          * Type of the element Conditional or Format
         */
        "type"?: "Values" | "Conditional";
        /**
          * If Conditional Value to format
         */
        "value"?: string;
        /**
          * If format first value
         */
        "value1"?: string;
        /**
          * If format second value
         */
        "value2"?: string;
    }
    interface GxQueryViewerParameter {
        /**
          * Name of the parameter
         */
        "Name"?: string;
        /**
          * Value of the parameter
         */
        "Value"?: string;
        /**
          * Fired each time the value of the control changes
         */
        "onParameterValueChanged"?: (event: GxQueryViewerParameterCustomEvent<QueryViewerParameterChangedEvent>) => void;
    }
    interface IntrinsicElements {
        "gx-query-viewer": GxQueryViewer;
        "gx-query-viewer-card": GxQueryViewerCard;
        "gx-query-viewer-card-controller": GxQueryViewerCardController;
        "gx-query-viewer-chart": GxQueryViewerChart;
        "gx-query-viewer-controller": GxQueryViewerController;
        "gx-query-viewer-element": GxQueryViewerElement;
        "gx-query-viewer-element-format": GxQueryViewerElementFormat;
        "gx-query-viewer-format-style": GxQueryViewerFormatStyle;
        "gx-query-viewer-parameter": GxQueryViewerParameter;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "gx-query-viewer": LocalJSX.GxQueryViewer & JSXBase.HTMLAttributes<HTMLGxQueryViewerElement>;
            "gx-query-viewer-card": LocalJSX.GxQueryViewerCard & JSXBase.HTMLAttributes<HTMLGxQueryViewerCardElement>;
            "gx-query-viewer-card-controller": LocalJSX.GxQueryViewerCardController & JSXBase.HTMLAttributes<HTMLGxQueryViewerCardControllerElement>;
            "gx-query-viewer-chart": LocalJSX.GxQueryViewerChart & JSXBase.HTMLAttributes<HTMLGxQueryViewerChartElement>;
            "gx-query-viewer-controller": LocalJSX.GxQueryViewerController & JSXBase.HTMLAttributes<HTMLGxQueryViewerControllerElement>;
            "gx-query-viewer-element": LocalJSX.GxQueryViewerElement & JSXBase.HTMLAttributes<HTMLGxQueryViewerElementElement>;
            "gx-query-viewer-element-format": LocalJSX.GxQueryViewerElementFormat & JSXBase.HTMLAttributes<HTMLGxQueryViewerElementFormatElement>;
            "gx-query-viewer-format-style": LocalJSX.GxQueryViewerFormatStyle & JSXBase.HTMLAttributes<HTMLGxQueryViewerFormatStyleElement>;
            "gx-query-viewer-parameter": LocalJSX.GxQueryViewerParameter & JSXBase.HTMLAttributes<HTMLGxQueryViewerParameterElement>;
        }
    }
}
